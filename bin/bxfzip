#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rbconfig'
require 'zlib'

def architecture
  case RbConfig::CONFIG['host_cpu']
  when 'arm64', 'aarch64', 'arch64'
    'arm64'
  when 'x86_64'
    'amd64'
  else
    'i386'
  end
end

suffix = case RbConfig::CONFIG['host_os']
         when /linux/
           os = `. /etc/os-release 2> /dev/null && echo ${ID}_${VERSION_ID}`.strip
           os = 'ubuntu-20.04' if os.start_with?('ubuntu_20.')
           os = 'ubuntu-22.04' if os.start_with?('ubuntu_22.')
           os = 'ubuntu-24.04' if os.start_with?('ubuntu_24.')
           os_based_on_debian_9 = os.start_with?('debian_9') ||
                                  os.start_with?('deepin')
           os = 'debian_9' if os_based_on_debian_9

           os = 'debian_10' if !os_based_on_debian_9 && os.start_with?('debian_10')

           os = 'debian_11' if !os_based_on_debian_9 && os.start_with?('debian_11')

           os = 'debian_12' if !os_based_on_debian_9 && os.start_with?('debian_12')
           "#{os}_#{architecture}"
         else
           'unknown'
         end

suffix = ENV['BXFZIP_SUFFIX'] unless ENV['BXFZIP_SUFFIX'].to_s.empty?

binary = "#{__FILE__}-#{suffix}"

if File.exist?("#{binary}.gz") && !File.exist?(binary)
  File.open binary, 'wb', 0o755 do |file|
    Zlib::GzipReader.open("#{binary}.gz") { |gzip| file << gzip.read }
  end
end

unless File.exist? binary
  raise "Invalid platform, must be running on Ubuntu 20.04/22.04/24.04. -- #{binary}"
end

exec(*ARGV.unshift(binary))
